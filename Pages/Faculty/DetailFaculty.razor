@page "/Faculty/{Id:int}"
@page "/Faculty/create"

@using WEB_API_FRONTEND.Models
@using WEB_API_FRONTEND.Interface

@inject InterfaceFaculty _interfaceFaculty
@inject NavigationManager Navigation
@inject IToastService ToastService

<div class="conteiner d-flex justify-content-center m-0 p-0">
    <EditForm Model="@faculty" OnValidSubmit="@HandleOnValidSubmit" class="col-sm-4 col-md-4 col-lg-4 p-0">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                @if (Id != null)
                {
                    <h3>@faculty.NameFaculty</h3>
                }
                else
                {
                    <h3>Registrar Nueva Facultad</h3>
                }
            </div>

            <div class="card-body">
                <div class="form-group">
                    <label for="nameFaculty" class="form-label">Facultad </label>
                    <InputText id="nameFaculty" @bind-Value="faculty.NameFaculty" class="form-control"
                        placeholder="Facultad" />
                    <ValidationMessage For="@(() => faculty.NameFaculty)" />
                </div>

                <div class="form-group">
                    <label for="addresss" class="form-label">Dirección </label>
                    <InputText id="addresss" @bind-Value="faculty.Address" class="form-control"
                        placeholder="Dirección" />
                    <ValidationMessage For="@(() => faculty.Address)" />
                </div>

                <div class="form-group">
                    <label for="phone" class="form-label">Teléfono </label>
                    <InputText id="phone" @bind-Value="faculty.Phone" class="form-control" placeholder="Teléfono" />
                    <ValidationMessage For="@(() => faculty.Phone)" />
                </div>

                <div class="form-group">
                    <label for="email" class="form-label">Email </label>
                    <InputText type="email" id="email" @bind-Value="faculty.Email" class="form-control"
                        placeholder="Email" />
                    <ValidationMessage For="@(() => faculty.Email)" />
                </div>

                <div class="d-grid gap-2 mt-4"> 
                    <button type="submit" class="btn btn-primary btn-sm" hidden="@(Id == null)">  Guardar</button>
                    <button type="submit" class="btn btn-success btn-sm" hidden="@(Id != null)"><i class="bi bi-plus-circle"></i>  Registrar</button>
                    <a href="Faculties/List" class="btn btn-secondary btn-sm"><i class="bi bi-x-circle"></i>  Cancelar</a>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    public Faculty faculty = new Faculty();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            Console.WriteLine("ID: " + Id.Value);
            faculty = await _interfaceFaculty.GetById(Id.Value);
        }
    }
    private async Task HandleOnValidSubmit()
    {
        try
        {
            if (Id != null) {
                await _interfaceFaculty.UpdateFaculty(Id.Value, faculty);
                Navigation.NavigateTo("/Faculties/List");
            } 
            else
            {
                Faculty newFaculty = await _interfaceFaculty.CreateFaculty(faculty);
                Navigation.NavigateTo($"/Faculty/{newFaculty.IdFaculty}");
            }

            ToastService.ShowSuccess("Se han guardado los datos correctamente", "Buen trabajo!");
        }
        catch (System.Exception)
        {

            ToastService.ShowError("Se ha presentado un error al guardar los datos", "Ops!");
        }

    }

}