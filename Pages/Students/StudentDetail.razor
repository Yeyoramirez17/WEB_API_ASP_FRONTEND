@page "/CreateStudent"
@page "/EditStudent/{IdStudent:int}"

@using WEB_API_FRONTEND.Models
@using WEB_API_FRONTEND.Interface

@inject InterfaceStudent _interfaceStudent
@inject IToastService ToastService
@inject NavigationManager _navigationManager

<div class="container d-flex justify-content-center m-0 p-0">
    <EditForm class="col-sm-4 col-md-4 col-lg-4 p-0" OnValidSubmit="@HandleOnValidSubmit" Model="@_student">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header text-center">
                @if (IdStudent != null)
                {
                    <h4>@_student.FirstName @_student.LastName</h4>
                    <p>Registro N° @_student.IdStudent</p>
                }
                else
                {
                    <h4>Registrar Estudiante</h4>
                }
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label class="form-label" for="firstNameStudent">Nombres</label>
                    <InputText class="form-control" id="firstNameStudent" type="text" placeholder="Nombre"
                        @bind-Value="_student.FirstName" />
                    <ValidationMessage For="@(() => _student.FirstName)" />
                </div>
                <div class="form-group">
                    <label class="form-label" for="lastNameStudent">Apellidos</label>
                    <InputText class="form-control" id="lastNameStudent" type="text" placeholder="Apellido"
                        @bind-Value="_student.LastName" />
                    <ValidationMessage For="@(() => _student.LastName)" />
                </div>
                <div class="form-group">
                    <label class="form-label" for="identificationStudent">Identificación</label>
                    <InputText class="form-control" id="identificationStudent" type="text"
                        placeholder="Numero de Identificación" @bind-Value="_student.Identification" />
                    <ValidationMessage For="@(() => _student.Identification)" />
                </div>
                <div class="form-group">
                    <label class="form-label" for="birthDateStudent">Fecha de Nacimiento</label>
                    <InputDate class="form-control" id="birthDateStudent" placeholder="Fecha de Nacimiento"
                        @bind-Value="_student.BirthDate" />
                    <ValidationMessage For="@(() => _student.BirthDate)" />
                </div>
                <div class="form-group">
                    <label class="form-label" for="ageStudent">Edad</label>
                    <InputNumber class="form-control" id="ageStudent" type="text" placeholder="Edad del estudiante"
                        @bind-Value="_student.Age" />
                    <ValidationMessage For="@(() => _student.Age)" />
                </div>
                <div class="form-group">
                    <label class="form-label" for="phoneStudent">Teléfono</label>
                    <InputText class="form-control" id="phoneStudent" type="text" placeholder="Teléfono"
                        @bind-Value="_student.Phone" />
                    <ValidationMessage For="@(() => _student.Phone)" />
                </div>
                <div class="form-group">
                    <label class="form-label" for="emailStudent">Email</label>
                    <InputText class="form-control" id="emailStudent" type="text" placeholder="Correo Electronico"
                        @bind-Value="_student.Email" />
                    <ValidationMessage For="@(() => _student.Email)" />
                </div>
                <div class="d-grid gap-2 mt-4">
                    <button type="submit" class="btn btn-primary" hidden="@(IdStudent != null)"> <i class="bi bi-arrow-up-square"></i> Registrar</button>
                    <button type="submit" class="btn btn-success" hidden="@(IdStudent == null)"> <i class="bi bi-check-lg"></i> Guardar</button>
                    <button type="button" class="btn btn-secondary" @onclick='( () => _navigationManager.NavigateTo("studentsList"))'> <i class="bi bi-x-circle"></i> Cancelar</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public int? IdStudent { get; set; }
    private Student _student = new Student();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (IdStudent != null)
        {
            _student = await _interfaceStudent.GetStudentById(IdStudent.Value);
        }
    }
    private async Task HandleOnValidSubmit()
    {
        try
        {
            if (IdStudent != null)
            {
                await _interfaceStudent.UpdateStudent(IdStudent.Value, _student);
                _navigationManager.NavigateTo("studentsList");
            }
            else
            {
                Student newStudent = await _interfaceStudent.CreateStudent(_student);
                _navigationManager.NavigateTo("studentsList");
            }
            ToastService.ShowSuccess("Se han guardado los datos correctamente", "Buen trabajo!");
        }
        catch (System.Exception exception)
        {
            Console.WriteLine(exception.Message);
            ToastService.ShowError("Se ha presentado un error al guardar los datos", "Ops!");
        }
    }

}